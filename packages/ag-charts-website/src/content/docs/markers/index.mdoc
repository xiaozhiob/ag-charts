---
title: 'Series Markers'
---

Data points can be represented by markers in many series types, including `line`, `area`, `scatter`, and `bubble`.

Marker attributes such as `shape`, `size`, `fill` and `stroke` are configurable within each series.

These options are identical across series types, but differ in their location. Series without lines, such as `scatter` and `bubble` have these options on the series level, otherwise they are contained within the `marker` property.

```js
series: [
    // ...
    marker: {
        shape: 'square', // defaults to 'circle'
        size: 20,
        fill: 'red',
        stroke: 'maroon',
    },
]
```

Please see the [API reference](#api-reference) for the list of all available options.

### Marker Shape, Size and Colour

{% chartExampleRunner title="Marker Shape, Size and Colour" name="marker-shape" type="generated" /%}

Notice how the shape and colour of the legend markers automatically match the shape and colour of the markers used by the series, but the size of the markers in the legend remains the same.

The legend item marker can be modified within the [Legend Options](./legend/#markers).

## Custom Marker Shapes

You can easily define custom marker shapes by providing a callback function to create the desired shape. This function takes `x` and `y` parameters, representing the marker's position on the canvas, the `size` of the marker and the `path` instance. The path includes various drawing methods that allow you to apply specific drawing commands to construct the marker.
If you are familiar with the standard Canvas API, you'll feel right at home here. The `path` API is very similar to that of [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D).

for example to draw a heart:

```js
const rad = (degree: number) => {
    return (degree / 180) * Math.PI;
};

const heart = ({ x, y, path, size }) => {
    const r = size / 4;
    const yCoord = y + r / 2;

    path.clear();
    path.arc(x - r, yCoord - r, r, rad(130), rad(330));
    path.arc(x + r, yCoord - r, r, rad(220), rad(50));
    path.lineTo(x, yCoord + r);
    path.closePath();
};
```

All we do is render two partial circles with the `cubicArc` command and then two straight lines using the `lineTo` and `closePath` commands to get the shape of a heart.

Inside the marker config of a series we then use this callback function rather than using one of the predefined shape names:

```js
marker: {
    shape: (params) => heart(params),
    size: 16,
}
```

The final result is shown in the example below.

{% chartExampleRunner title="Custom Marker Shape" name="custom-marker" type="generated" /%}

## API Reference

{% tabs %}

{% tabItem id="AgSeriesMarkerOptions" label="Series Marker" %}
{% apiReference id="AgSeriesMarkerOptions" /%}
{% /tabItem %}

{% /tabs %}
